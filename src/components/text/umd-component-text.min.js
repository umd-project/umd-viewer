const template=document.createElement("template");template.innerHTML='\n    <style>\n    :host {\n        display: grid;\n        grid-template-rows: max-content;\n        grid-template-columns: auto;\n        align-items: center;\n        padding-left: 1.6rem !important;\n        padding-right: 1.6rem !important;\n        padding-top: 1.6rem !important;\n        padding-bottom: 1.6rem !important;\n    }\n    :host([disabled]) {\n        color: var(--theme-message-color);    \n    }\n\n    :host([hidden]) {\n        display:none;\n    }  \n\n    .html {\n        grid-row: 1;\n        border: 0;\n    }\n\n    </style>\n    <div class="html"></div>\n';export class UmdComponentText extends HTMLElement{static get observedAttributes(){return["data-url"]}constructor(){super(),this._shadowRoot=this.attachShadow({mode:"closed"}),this._shadowRoot.appendChild(template.content.cloneNode(!0))}connectedCallback(){}attributeChangedCallback(name,oldVal,newVal){switch(newVal="undefined"===newVal?"":newVal,name){case"data-url":newVal&&this._loadFile(newVal)}}_loadFile(url){fetch(url).then(resp=>resp.text()).then(t=>{const _ele=this._stringToHTML(t);this._shadowRoot.querySelector(".html").innerHTML=_ele.innerHTML})}_support(){if(!window.DOMParser)return!1;var parser=new DOMParser;try{parser.parseFromString("x","text/html")}catch(err){return!1}return!0}_stringToHTML(str){var parser,doc;if(this._support)return(new DOMParser).parseFromString(str,"text/html").body;var dom=document.createElement("div");return dom.innerHTML=str,dom}disconnectedCallback(){}}window.customElements.define("umd-component-text",UmdComponentText);